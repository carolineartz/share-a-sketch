import * as React from "react"
import "styled-components/macro"
import styled, { css } from "styled-components"
import { IconProps } from "grommet-icons"

export const ShapeCircle = (props: any): JSX.Element => (
  <Icon viewBox="0 0 24 24" a11yTitle="Shape-Circle" {...props}>
    <path
      stroke="none"
      d="M12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 C9.82221987,2 7.80703466,2.69615164 6.16483752,3.87806177 C3.64242491,5.69347416 2,8.65493263 2,12 C2,17.5228475 6.4771525,22 12,22 Z"
    />
  </Icon>
)

export const ShapeSquare = (props: any): JSX.Element => (
  <Icon viewBox="0 0 24 24" a11yTitle="Shape-Circle" {...props}>
    <path
      stroke="none"
      d="M-7.10542736e-15,7.10542736e-15 C-7.10542736e-15,7.10542736e-15 -7.10542736e-15,6.66666667 -7.10542736e-15,20 L20,20 L20,7.10542736e-15 C6.66666667,7.10542736e-15 -7.10542736e-15,7.10542736e-15 -7.10542736e-15,7.10542736e-15 Z"
    />
  </Icon>
)

export const ShapeStar = (props: any): JSX.Element => (
  <Icon viewBox="0 0 24 24" a11yTitle="Shape-Circle" {...props}>
    <path
      stroke="none"
      d="M23.1428483,0 L0.857151744,0 C0.383361777,0 0,0.383361777 0,0.857151744 L0,23.1428483 C0,23.6166382 0.383361777,24 0.857151744,24 L23.1428483,24 C23.6166382,24 24,23.6166382 24,23.1428483 L24,0.857151744 C24,0.383361777 23.6166382,0 23.1428483,0 Z M22.2857463,22.2856965 L1.71430349,22.2856965 L1.71430349,1.71430349 L22.2857463,1.71430349 L22.2857463,22.2856965 L22.2857463,22.2856965 Z"
    />
  </Icon>
)

export const Ruler = (props: any): JSX.Element => (
  <Icon viewBox="0 0 24 24" a11yTitle="Tool Size" {...props}>
    <path d="M16.3672708,0.214602724 C16.6273953,-0.0455217899 17.0335038,-0.0691694729 17.3201709,0.143659675 L17.4023223,0.214602724 L23.2979968,6.11027724 C23.5581214,6.37040176 23.581769,6.77651025 23.3689399,7.06317731 L23.2979968,7.14532875 L7.14532875,23.2979968 C6.88520424,23.5581214 6.47909575,23.581769 6.19242869,23.3689399 L6.11027724,23.2979968 L0.214602724,17.4023223 C-0.0455217899,17.1421978 -0.0691694729,16.7360893 0.143659675,16.4494223 L0.214602724,16.3672708 L16.3672708,0.214602724 Z M16.8864,1.76928 L16.29888,2.35776 L18.8922752,4.95087681 C19.1523997,5.21100133 19.1760474,5.61710982 18.9632183,5.90377688 L18.8922752,5.98592833 C18.6321507,6.24605284 18.2260422,6.26970052 17.9393752,6.05687137 L17.8572237,5.98592833 L15.264,3.39264 L14.31456,4.34112 L15.9025022,5.95733506 C16.1659047,6.22073759 16.1879848,6.627127 15.9738305,6.91483117 L15.9025022,6.99732019 C15.6425424,7.25728003 15.2364775,7.27716341 14.9496549,7.06348908 L14.8674507,6.99238657 L13.26528,5.3904 L12.31776,6.33888 L14.9108448,8.93230722 C15.1709693,9.19243173 15.194617,9.59854023 14.9817879,9.88520728 L14.9108448,9.96735873 C14.6507203,10.2274832 14.2446118,10.2511309 13.9579447,10.0383018 L13.8757933,9.96735873 L11.28288,7.37376 L10.3344,8.32224 L11.9358727,9.91903099 C12.1959972,10.1791555 12.2196448,10.585264 12.0068157,10.8719311 L11.9358727,10.9540825 C11.6757481,11.214207 11.2696396,11.2378547 10.9831505,11.0252033 L10.901058,10.954319 L9.29952,9.35616 L8.35104,10.3056 L10.9442153,12.8989368 C11.2043398,13.1590613 11.2279875,13.5651698 11.0183846,13.8485267 L10.9485095,13.9295825 C10.6936981,14.1978051 10.2812359,14.224088 9.99196759,14.0102689 L9.90916375,13.9389219 L7.31616,11.34528 L6.36768,12.29376 L7.97911034,13.9004614 C8.26693614,14.1882872 8.26004236,14.6593624 7.9692431,14.9355129 C7.70758328,15.1971727 7.29447769,15.2152626 7.01405408,14.9979075 L6.93419159,14.9256457 L5.3328,13.32384 L1.76928,16.8864 L6.62496,21.74208 L21.74208,6.62496 L16.8864,1.76928 Z"/>
    <path d="M7.18547247,16.4172845 C7.89511343,17.1326026 7.89511343,18.2855655 7.1847977,18.9958812 C6.47436952,19.7063094 5.31595168,19.7063094 4.60552349,18.9958812 C3.93466975,18.3250275 3.8974001,17.2593434 4.4931461,16.5404055 L4.60552349,16.416607 C5.31583922,15.7062913 6.46880216,15.7062913 7.18547247,16.4172845 Z M5.63741826,17.4547965 C5.49719099,17.5980073 5.49719099,17.8273129 5.63384571,17.9639864 C5.75659786,18.0841813 5.94260332,18.1013519 6.08043001,18.0166175 L6.14481257,17.9657633 L6.23214613,17.8784298 L6.24096,17.88 L6.26579579,17.820217 C6.29196522,17.7237452 6.27235102,17.6166123 6.20841782,17.5270704 L6.14660825,17.458369 C6.00339742,17.3181417 5.77409179,17.3181417 5.63741826,17.4547965 Z"/>
  </Icon>
)

export const ColorDrop = (props: any): JSX.Element => (
  <Icon viewBox="0 0 24 24" a11yTitle="Color-Drop" {...props}>
    <path
      stroke="none"
      d="M13.752,1.7664 C13.2144,1.1264 12.7024,0.5376 12.2416,0 C11.7808,0.5632 11.2688,1.152 10.7312,1.7664 C7.48,5.504 3,10.7008 3,14.7456 C3,17.3056 4.024,19.6096 5.7136,21.2736 C7.3776,22.9376 9.6816,23.9872 12.2416,23.9872 C14.8016,23.9872 17.1056,22.9632 18.7696,21.2736 C20.4336,19.6096 21.4832,17.28 21.4832,14.7456 C21.4832,10.7008 17.0032,5.5296 13.752,1.7664 Z"
    />
  </Icon>
)

export const Cloud = (props: any): JSX.Element => (
  <Icon viewBox="0 0 24 24" a11yTitle="Network Connected" {...props}>
    <path
      stroke="none"
      d="M12.3546667,2.4 C15.3035689,2.4 17.7672402,4.47752055 18.361897,7.24877804 C18.6279534,7.20266097 18.9018413,7.17866667 19.1813333,7.17866667 C21.8205181,7.17866667 23.96,9.31814861 23.96,11.9573333 C23.96,14.5965181 21.8205181,16.736 19.1813333,16.736 C19.0906135,16.736 19.0004841,16.733472 18.9110118,16.7284827 C18.8882568,16.7334339 18.8644281,16.736 18.84,16.736 L5.18666667,16.736 C2.35896876,16.736 0.0666666667,14.4436979 0.0666666667,11.616 C0.0666666667,8.7883021 2.35896876,6.496 5.18666667,6.496 C5.64165185,6.496 6.08277576,6.55534722 6.50271956,6.66672282 C7.29604427,4.19170028 9.61611848,2.4 12.3546667,2.4 Z"
    />
  </Icon>
)

export const CrossSmall = (props: any): JSX.Element => (
  <Icon viewBox="0 0 24 24" a11yTitle="Cross Out Small Line" {...props}>
    <path
      stroke="none"
      d="M21.3763517,2.19431496 C21.5763001,2.39426342 21.5763001,2.71844386 21.3763517,2.91839232 L3.03305899,21.261685 C2.83311053,21.4616335 2.50893008,21.4616335 2.30898162,21.261685 C2.1090332,21.0617366 2.1090332,20.7375561 2.30898162,20.5376077 L20.6522743,2.19431496 C20.8522228,1.99436653 21.1764033,1.99436653 21.3763517,2.19431496 Z"
    />
  </Icon>
)

export const CrossLarge = (props: any): JSX.Element => (
  <Icon viewBox="0 0 24 24" a11yTitle="Cross Out Small Line" {...props}>
    <path
      stroke="none"
      d="M19.2380609,0.780101274 L0.894768061,19.1233941 C-0.0862289067,20.1043913 -0.0862289067,21.6949015 0.89476794,22.6758985 C1.8757652,23.6568956 3.46627541,23.6568956 4.44727243,22.6758987 L22.7905653,4.33260588 C23.7715622,3.35160875 23.7715622,1.76109853 22.7905652,0.780101274 C21.8095681,-0.200895573 20.2190579,-0.200895573 19.2380609,0.780101274 Z"
    />
  </Icon>
)

// export const CloudDisconnected = (props: any): JSX.Element => (
//   <Icon viewBox="0 0 24 24" a11yTitle="Network Disconnected" {...props}>
//     <path
//       fill="status-critical"
// css={`
//   fill: status-critical;
// `}
//       d="M12.3546667,2.4 C15.3035689,2.4 17.7672402,4.47752055 18.361897,7.24877804 C18.6279534,7.20266097 18.9018413,7.17866667 19.1813333,7.17866667 C21.8205181,7.17866667 23.96,9.31814861 23.96,11.9573333 C23.96,14.5965181 21.8205181,16.736 19.1813333,16.736 C19.0906135,16.736 19.0004841,16.733472 18.9110118,16.7284827 C18.8882568,16.7334339 18.8644281,16.736 18.84,16.736 L5.18666667,16.736 C2.35896876,16.736 0.0666666667,14.4436979 0.0666666667,11.616 C0.0666666667,8.7883021 2.35896876,6.496 5.18666667,6.496 C5.64165185,6.496 6.08277576,6.55534722 6.50271956,6.66672282 C7.29604427,4.19170028 9.61611848,2.4 12.3546667,2.4 Z"
//     />
//     <path
//       d="M21.014313,-1.05564636 C20.6017663,-1.05564636 20.1892195,-0.898265104 19.874457,-0.583502569 L1.53116416,17.7597902 C1.21640156,18.0745529 1.05902031,18.4870996 1.05902031,18.8996464 C1.05902031,19.3121931 1.21640156,19.7247398 1.5311641,20.0395024 C1.84592682,20.3542651 2.25847356,20.5116464 2.67102031,20.5116464 C3.08356705,20.5116464 3.49611379,20.3542651 3.81087638,20.0395026 L22.1541692,1.69620978 C22.4689318,1.38144712 22.626313,0.968900379 22.626313,0.556353638 C22.626313,0.242634937 22.8727615,-0.200921992 21.014313,-1.05564636 Z"
//       stroke="none"
//     />
//   </Icon>
// )

//  <path
//     stroke="none"
//     d="M21.3763517,0.194314957 C21.5763001,0.394263415 21.5763001,0.718443861 21.3763517,0.91839232 L17.3411581,4.95384141 C17.8280502,5.62891575 18.1812316,6.4068298 18.361897,7.24877804 C18.6279534,7.20266097 18.9018413,7.17866667 19.1813333,7.17866667 C21.8205181,7.17866667 23.96,9.31814861 23.96,11.9573333 C23.96,14.5965181 21.8205181,16.736 19.1813333,16.736 C19.0906135,16.736 19.0004841,16.733472 18.9110118,16.7284827 C18.8882568,16.7334339 18.8644281,16.736 18.84,16.736 L5.55866667,16.7353536 L3.03305899,19.261685 C2.83311053,19.4616335 2.50893008,19.4616335 2.30898162,19.261685 C2.1090332,19.0617366 2.1090332,18.7375561 2.30898162,18.5376077 L4.20492856,16.6419742 C1.84689092,16.1840503 0.0666666667,14.107922 0.0666666667,11.616 C0.0666666667,8.7883021 2.35896876,6.496 5.18666667,6.496 C5.64165185,6.496 6.08277576,6.55534722 6.50271956,6.66672282 C7.29604427,4.19170028 9.61611848,2.4 12.3546667,2.4 C14.038258,2.4 15.5636878,3.07717038 16.6734441,4.17399934 L20.6522743,0.194314957 C20.8522228,-0.00563346773 21.1764033,-0.00563346773 21.3763517,0.194314957 Z"
//   />

const colorCss = css`
  fill: ${(props: any) => props.color || props.theme.global.colors.icon};
  stroke: ${(props: any) => props.color || props.theme.global.colors.icon};
  g {
    fill: inherit;
    stroke: inherit;
  }
  *:not([stroke]) {
    &[fill="none"] {
      stroke-width: 0;
    }
  }
  *[stroke*="#"],
  *[STROKE*="#"] {
    stroke: inherit;
    fill: none;
  }
  *[fill-rule],
  *[FILL-RULE],
  *[fill*="#"],
  *[FILL*="#"] {
    fill: inherit;
    stroke: none;
  }
`

const IconInner = ({ a11yTitle, color: _color, size: _size, ...rest }: IconProps): JSX.Element => (
  <svg aria-label={a11yTitle} {...rest} />
)

IconInner.displayName = "Icon"

const parseMetricToNum = (string: string): number => {
  const match = string.match(/\d+(\.\d+)?/)
  if (match) {
    return Number.parseFloat(match[0])
  }
    return 24

}

export const Icon = styled(IconInner)<IconProps & { viewBox: string }>`
  display: inline-block;
  flex: 0 0 auto;
  ${({ size = "medium", theme, viewBox }) => {
    const [, , w, h] = (viewBox || "0 0 24 24").split(" ")
    const scale = (Number.parseInt(w, 2) || 24) / (Number.parseInt(h, 2) || 24)
    const dimension = parseMetricToNum(theme.icon.size[size] || size)
    if (w < h) {
      return `
      width: ${dimension}px;
      height: ${dimension / scale}px;
    `
    }
    if (h < w) {
      return `
      width: ${dimension * scale}px;
      height: ${dimension}px;
    `
    }
    return `
      width: ${dimension}px;
      height: ${dimension}px;
    `
  }}
  ${({ color }) => color !== "plain" && colorCss}
  ${({ theme }) => theme && theme.icon.extend}
`
